// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_logs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAccessLog = `-- name: CreateUserAccessLog :exec
insert into user_access_logs (
    user_id, 
    logged_in,
    logged_out
) values (
    $1, $2, $3
)
`

type CreateUserAccessLogParams struct {
	UserID    pgtype.Int4
	LoggedIn  pgtype.Timestamp
	LoggedOut pgtype.Timestamp
}

// create does not return an acces log.
func (q *Queries) CreateUserAccessLog(ctx context.Context, arg CreateUserAccessLogParams) error {
	_, err := q.db.Exec(ctx, createUserAccessLog, arg.UserID, arg.LoggedIn, arg.LoggedOut)
	return err
}

const deleteUserAccessLog = `-- name: DeleteUserAccessLog :exec
delete from user_access_logs where id = $1
`

func (q *Queries) DeleteUserAccessLog(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserAccessLog, id)
	return err
}

const getLastAccessLogWithUserID = `-- name: GetLastAccessLogWithUserID :one
select id, user_id, logged_in, logged_out from user_access_logs 
where user_id = $1 
order by logged_in desc
limit 1
`

func (q *Queries) GetLastAccessLogWithUserID(ctx context.Context, userID pgtype.Int4) (UserAccessLog, error) {
	row := q.db.QueryRow(ctx, getLastAccessLogWithUserID, userID)
	var i UserAccessLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LoggedIn,
		&i.LoggedOut,
	)
	return i, err
}

const listUserAccessLogs = `-- name: ListUserAccessLogs :many
select id, user_id, logged_in, logged_out from user_access_logs
where user_id = $1
`

func (q *Queries) ListUserAccessLogs(ctx context.Context, userID pgtype.Int4) ([]UserAccessLog, error) {
	rows, err := q.db.Query(ctx, listUserAccessLogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccessLog
	for rows.Next() {
		var i UserAccessLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LoggedIn,
			&i.LoggedOut,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
