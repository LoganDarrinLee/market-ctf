// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
insert into user_roles (
    user_role, role_info
) values (
    $1, $2
) returning id, user_role, role_info
`

type CreateRoleParams struct {
	UserRole string
	RoleInfo pgtype.Text
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createRole, arg.UserRole, arg.RoleInfo)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserRole, &i.RoleInfo)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
delete from user_roles where id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
select id, user_role, role_info from user_roles
where user_role = $1 limit 1
`

func (q *Queries) GetRole(ctx context.Context, userRole string) (UserRole, error) {
	row := q.db.QueryRow(ctx, getRole, userRole)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserRole, &i.RoleInfo)
	return i, err
}

const listRoles = `-- name: ListRoles :many
select id, user_role, role_info from user_roles order by id
`

func (q *Queries) ListRoles(ctx context.Context) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.ID, &i.UserRole, &i.RoleInfo); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
update user_roles
    set user_role = $2,
        role_info = $3
    where id = $1
returning id, user_role, role_info
`

type UpdateRoleParams struct {
	ID       int32
	UserRole string
	RoleInfo pgtype.Text
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.UserRole, arg.RoleInfo)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserRole, &i.RoleInfo)
	return i, err
}
